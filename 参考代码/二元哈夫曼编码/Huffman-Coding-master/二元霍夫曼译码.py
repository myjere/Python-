#coding:utf-8
from PIL import Image
from struct import *
bian_ma_biao = {'216': '011010100', '217': '11110110', '214': '011010110', '215': '011010101', '224': '011110111', '213': '001011011', '210': '100111011', '211': '011100011', '218': '000101001', '219': '011100010', '133': '1000110', '91': '001010001', '131': '0111110', '130': '0010101', '137': '00101001', '136': '1101011', '135': '1001011', '226': '011010011', '212': '011010111', '139': '10001000', '138': '1111100', '225': '001000110', '24': '1110001011', '25': '1010011000', '26': '0111010001', '27': '110001101', '20': '11100010000000', '21': '1110001000010', '22': '11110011110', '23': '00111100001', '223': '001011010', '28': '110001100', '29': '111111001', '222': '011111110', '221': '000110011', '220': '100010010', '119': '0011101', '120': '0110011', '121': '1000000', '122': '0010011', '123': '0001111', '124': '0001011', '125': '0011100', '126': '0110010', '127': '0111011', '128': '0000100', '129': '0110110', '118': '0011011', '134': '1001100', '59': '1101001', '58': '1100000', '61': '1110101', '55': '00001010', '54': '1110000', '57': '1100010', '56': '1100101', '51': '00010101', '50': '00011011', '53': '01100000', '52': '10010001', '64': '01111110', '90': '11011000', '201': '001100000', '199': '110100011', '198': '0110001001', '200': '110100010', '195': '111110110', '194': '0000111110', '197': '0010010100', '196': '0110100010', '191': '0010010101', '190': '0011110001', '193': '111011111', '192': '0111111110', '227': '001000101', '68': '00110010', '88': '001100001', '145': '1111001110', '111': '1010010', '110': '1111000', '113': '1011000', '69': '10011100', '82': '0010010111', '83': '101011011', '80': '111100110', '81': '110000100', '86': '101000011', '87': '100101010', '84': '100101011', '85': '100111101', '251': '1000011', '140': '10000100', '108': '1100100', '66': '00101100', '141': '11110010', '254': '00000', '92': '11100100', '255': '010', '245': '101011001', '244': '101101101', '247': '001000011', '246': '111110100', '241': '110111', '240': '0001110', '243': '00001100', '242': '0001000', '95': '10001111', '103': '1110110', '100': '10001110', '101': '00100000', '249': '001000010', '248': '000011110', '104': '00110101', '105': '00001101', '39': '10100011', '38': '10101110', '33': '11010101', '32': '011011110', '31': '101010010', '30': '100010110', '37': '10101111', '93': '11101110', '35': '000110101', '34': '001111011', '109': '1111010', '94': '01110101', '114': '1001001', '252': '110011', '132': '0011111', '60': '1011010', '102': '01100001', '62': '1110100', '63': '01100011', '97': '10011011', '65': '00110011', '179': '0111001100', '178': '0111001101', '177': '1000101110', '176': '111110111', '175': '1000010110', '174': '0111001110', '173': '1010000100', '172': '1010100110', '171': '1110111100', '170': '1010000101', '203': '0000111111', '106': '1110011', '253': '10111', '107': '00110001', '182': '1110001001', '183': '0110100011', '180': '1010011001', '181': '0110100100', '186': '0010010110', '187': '0110111111', '184': '1000010101', '185': '1000010100', '188': '1001110101', '189': '0111111111', '142': '001111010', '99': '01101110', '98': '10100000', '168': '0110001000', '169': '1000101111', '229': '011110110', '228': '001010000', '164': '0001100100', '165': '1000010111', '166': '0110100101', '167': '1001110100', '160': '1011011001', '161': '0001100101', '162': '111111000', '163': '1010100111', '11': '11100010000011', '115': '1010101', '13': '11100010000010', '15': '111000100010', '14': '111100111111', '17': '1110001000011', '16': '11100010000001', '19': '111000100011', '18': '111100111110', '143': '100010011', '117': '1000001', '89': '11111101', '151': '0111001111', '150': '1100001011', '153': '1110001010', '152': '0110111110', '155': '1011011000', '154': '1110111101', '157': '00111100000', '156': '1010110001', '159': '1100001010', '158': '1010110000', '112': '1011001', '36': '11100101', '116': '0111100', '238': '0010111', '239': '0001001', '234': '011101001', '235': '011000101', '236': '10001010', '237': '1101101', '230': '001000100', '231': '000101000', '232': '101001101', '233': '001111001', '48': '00110100', '49': '00001110', '46': '01110000', '47': '10011111', '44': '10010100', '45': '00100100', '42': '01111010', '43': '00001011', '40': '10101000', '41': '00011000', '146': '111000111', '147': '1100001101', '144': '110000111', '202': '111110101', '205': '011010000', '204': '111000110', '207': '101001111', '206': '100111100', '209': '101011010', '208': '101001110', '148': '0111010000', '149': '1100001100', '77': '11011001', '76': '11110111', '75': '000110100', '74': '11010100', '73': '11010000', '72': '10110111', '71': '10011010', '70': '01110010', '96': '11000111', '79': '001000111', '78': '10010000', '250': '10100010', '67': '1111111'}

def zi_jie_du_qu(qqqq):
    pppp = open('result.txt', 'r')
    pppp = pppp.readlines()[0].strip('\n')
    fff = open('huo_fu_man_decomressed.txt','w')
    l = ((pppp.__len__()-pppp.__len__()%8)/8)+2
    list = []
    for i in range(l):
        file = open(str(qqqq), "rb")
        file.seek(i)
        (a,) = unpack("B",file.read(1))
        list.append(a)
    file.close()
    result = ''
    for i in range(len(list)-2):
        buling = ''
        for j in range(8-len(bin(list[i])[2:])):
            buling = buling + '0'
        erjinzhi = buling + bin(list[i])[2:]
        result = result + erjinzhi
    yu_shu = 8-list[-1]
    last = bin(list[-2])[2:]
    if last.__len__() != yu_shu:
        buling = ''
        for j in range(8-yu_shu-last.__len__()):
            buling = buling + '0'
        erjinzhi = buling + bin(list[-2])[2:]
        result = result + erjinzhi
    if last.__len__()==yu_shu:
        result = result + bin(list[-2])[2:]
    fff.write(result)

def er_yuan_huo_fu_man_yi_ma(kuan,gao):  #霍夫曼译码
    file = open('huo_fu_man_decomressed.txt','r')
    zifuchuan = file.readlines()[0].strip('\n')
    #print zifuchuan
    i = 0
    sao_miao = ''
    huan_yuan_xiang_su = []
    while (i != zifuchuan.__len__()): #利用编码表进行译码
        sao_miao = sao_miao + zifuchuan[i]
        for key in bian_ma_biao.keys():
            if sao_miao == bian_ma_biao[key]:
                huan_yuan_xiang_su.append(key)
                sao_miao = ''
                break
        i += 1
    x = kuan
    y = gao
    c = Image.new('L',(x,y))
    k = 0
    for i in range(x):
        for j in range(y):
            c.putpixel((i,j), (int(huan_yuan_xiang_su[k])))
            k+=1
    c.save('huo_fu_man_huan_yuan_huan_yuan'+'.bmp')
    print("大佬，您的译码已经完成："+"图片存储为er_yuan_huo_fu_man_huan_yuan.bmp")
if __name__ == '__main__':
    file = raw_input("请大佬输入进行二元霍夫曼译码的文件名：")
    zi_jie_du_qu(file)
    kuan = int(raw_input("请大佬输入需要还原的图片的宽："))
    gao = int(raw_input("请大佬输入需要还原的图片的高："))
    er_yuan_huo_fu_man_yi_ma(kuan,gao)